/* Psuedo Code  */

#include <stdio.h>
#include <string.h>

#define uint8_t unsigned char
#define uint16_t unsigned short
#define uint32_t unsigned int


#define COMPARE 0x1 
#define PEND 0x2 
#define NEXT_PROTO 0x4 
#define PARSE_NO_PROTO -1

struct lkup_next { 
     uint16_t val; 
     uint16_t tbl_index; 
}; 

struct table_entry { 
    uint16_t sz; 
    uint8_t mask[128];
    uint8_t flags; 
    struct lkup_next   val[24]; 
}; 

struct parse_table { 
    uint8_t num; 
    struct table_entry entries[256]; 
}; 

unsigned long long rdtscl(void)
{
    unsigned int lo, hi;
    __asm__ __volatile__ ("rdtsc" : "=a"(lo), "=d"(hi));                        
    return ( (unsigned long long)lo)|( ((unsigned long long)hi)<<32 );  
}

void dump_buf (uint8_t *buf, uint32_t sz)
{
   uint32_t cnt=0;

   while (cnt<sz) {
       printf("%02hhx ", *buf);
       cnt++;
       buf++;
       if ((cnt > 0) & !(cnt%10)) {
          printf("\n");
       }
   }
   printf("\n");

}

/*

     Works on character, but could be extended to work more efficiently.

*/

static void inline apply_mask(uint8_t * buf, uint8_t *mask, uint16_t sz)
{
   uint16_t *tbuf = (uint16_t *) buf;
   uint16_t *tmask = (uint16_t *) mask;

   while (sz)
   {
       *tbuf &= *tmask;
       tbuf ++;
       tmask ++;
       sz --;
   }
}

/*

  Returns 0 on success

  No Parse protocol on failure

*/

uint8_t parse(uint8_t * buf, uint8_t * match_buf, struct parse_table *ptable) { 
    uint32_t start=0; 
    uint8_t *pmatch = match_buf; 
    uint8_t * pbuf = buf; 
    uint32_t next_proto=0;
    uint32_t vidx; 
    unsigned long stsc;
    unsigned long etsc;

    stsc=rdtscl();
    while (start < ptable->num) {

       memcpy(pmatch, pbuf, ptable->entries[start].sz); 

       apply_mask(pmatch, ptable->entries[start].mask, ptable->entries[start].sz);

       if (ptable->entries[start].flags & COMPARE) { 
             next_proto=0;
             vidx=0;
             while (ptable->entries[start].val[vidx].val !=0) {
                   if ((uint16_t) *pmatch == ptable->entries[start].val[vidx].val) {
                         next_proto=ptable->entries[start].val[vidx].tbl_index;
                         break; /* exit while */
                   }
                   vidx ++;
              }
              if (!next_proto) {
                   goto no_next_proto; /* exception packet unknown protocol*/
              }
         } 
         pmatch += ptable->entries[start].sz; 
         pbuf += ptable->entries[start].sz; 

         if ((ptable->entries[start].flags & PEND) & (ptable->entries[start].flags & NEXT_PROTO)) { 
               /* Move to next protocol to process as put in table, note could be same one */
                start = next_proto; /* no next_proto was handled above */
         
         } else if (ptable->entries[start].flags & PEND){
               if (next_proto > 0) {
                  start = next_proto;
                  next_proto=0;
               } else {
                    //break; /* Found end of protocols to parse */        
                    goto out;
               }
         } else {
                  start ++;
         }
      }
out:
      etsc=rdtscl();
      printf("time %lu\n", (etsc-stsc));
      return 0;

no_next_proto:
  
      //printf("No Next Protocol\n");
      etsc=rdtscl();
      printf("time %lu\n", (etsc-stsc));

      return PARSE_NO_PROTO;
}

void test_ether_only()
{

    uint8_t buf[]= {
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x07, /* ether src mac */
                    0x08, 0x00,                        /* ether type */

                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x09, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x11, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    
                   };
    struct parse_table tbl;
    uint8_t result[512] = {};
    int rslt=0;

    printf("\n ---- TEST ETHER BEGIN ----\n");
    tbl.num=3;

    tbl.entries[0].sz=6;

    tbl.entries[0].mask[0]=0xf0;
    tbl.entries[0].mask[1]=0xf0;
    tbl.entries[0].mask[2]=0xf0;
    tbl.entries[0].mask[3]=0xf0;
    tbl.entries[0].mask[4]=0xf0;
    tbl.entries[0].mask[5]=0xf0;
    
    tbl.entries[0].flags &=0;

    tbl.entries[1].sz=6;

    tbl.entries[1].mask[0]=0xff;
    tbl.entries[1].mask[1]=0xff;
    tbl.entries[1].mask[2]=0xff;
    tbl.entries[1].mask[3]=0xff;
    tbl.entries[1].mask[4]=0xff;
    tbl.entries[1].mask[5]=0xff;
    
    tbl.entries[1].flags &=0;

    tbl.entries[2].sz=2;

    tbl.entries[2].mask[0]=0xff;
    tbl.entries[2].mask[1]=0xff;
    
    tbl.entries[2].flags |=PEND;

    rslt=parse (buf, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("\n ---- TEST ETHER END ----\n");
}

void test_ether_ipv4_only()
{

    uint8_t buf[]= {
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x07, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    0x04,                              /* ipv4 version */
                    0xff,                              /* IHL */
                    0xde,0xed,                         /* dscp en */
                    0xde,0xed,                         /* length */
                    0xde,0xed,                         /* id */
                    0xde,0xed,                         /* flags & fragment */
                    0xff,                              /* ttl */
                    0xff,                              /* protocol */
                    0xde,0xed,                         /* cs */
                    0xde,0xed,0xbe,0xef,               /* ipv4 src */
                    0xef,0xbe,0xed,0xde,               /* ipv4 dst */

                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x09, /* ether src mac */
                    0x86, 0xdd,                        /* ether type */
                    
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x11, /* ether src mac */
                    0x08, 0x01,                        /* ether type */
                    
                   };

    struct parse_table tbl;
    uint8_t result[512] = {};
    int rslt=0;

    printf("\n ---- TEST ETHER & IPV4 ----\n");
    tbl.num=13;

    tbl.entries[0].sz=6;

    tbl.entries[0].mask[0]=0xf0;
    tbl.entries[0].mask[1]=0xf0;
    tbl.entries[0].mask[2]=0xf0;
    tbl.entries[0].mask[3]=0xf0;
    tbl.entries[0].mask[4]=0xf0;
    tbl.entries[0].mask[5]=0xf0;
    
    tbl.entries[0].flags &=0;

    tbl.entries[1].sz=6;

    tbl.entries[1].mask[0]=0xff;
    tbl.entries[1].mask[1]=0xff;
    tbl.entries[1].mask[2]=0xff;
    tbl.entries[1].mask[3]=0xff;
    tbl.entries[1].mask[4]=0xff;
    tbl.entries[1].mask[5]=0xff;
    
    tbl.entries[1].flags &=0;

    tbl.entries[2].sz=2;

    tbl.entries[2].mask[0]=0xff;
    tbl.entries[2].mask[1]=0xff;
    
    tbl.entries[2].flags |=PEND;
    tbl.entries[2].flags |=COMPARE;
    tbl.entries[2].flags |=NEXT_PROTO;

    tbl.entries[2].val[0].val=0x0008;
    tbl.entries[2].val[0].tbl_index=3;

    /* Grabs version & IHL */
    tbl.entries[3].sz=1;        

    tbl.entries[3].mask[0]=0x00;
    
    tbl.entries[3].flags &=0;

    /* Grabs dscp & ECN */
    tbl.entries[4].sz=1;        

    tbl.entries[4].mask[0]=0xff;
    
    tbl.entries[4].flags &=0;

    /* length  */
    tbl.entries[5].sz=2;        

    tbl.entries[5].mask[0]=0x0;
    tbl.entries[5].mask[1]=0x0;
    
    tbl.entries[5].flags &=0;

    /* id  */
    tbl.entries[6].sz=2;        

    tbl.entries[6].mask[0]=0x0;
    tbl.entries[6].mask[1]=0x0;
    
    tbl.entries[6].flags &=0;

    /* flags & fragment  */
    tbl.entries[7].sz=2;        

    tbl.entries[7].mask[0]=0x0;
    tbl.entries[7].mask[1]=0x0;
    
    tbl.entries[7].flags &=0;

    /* ttl  */
    tbl.entries[8].sz=1;        

    tbl.entries[8].mask[0]=0xff;
    
    tbl.entries[8].flags &=0;

    /* protocol  */
    tbl.entries[9].sz=1;        

    tbl.entries[9].mask[0]=0xff;
    
    tbl.entries[9].flags &=0;

    /* cs  */
    tbl.entries[10].sz=2;        

    tbl.entries[10].mask[0]=0x00;
    tbl.entries[10].mask[1]=0x00;
    
    tbl.entries[10].flags &=0;

    /* src ip  */
    tbl.entries[11].sz=4;        

    tbl.entries[11].mask[0]=0xff;
    tbl.entries[11].mask[1]=0xff;
    tbl.entries[11].mask[2]=0xff;
    tbl.entries[11].mask[3]=0xff;
    
    tbl.entries[11].flags &=0;

    /* dst ip  */
    tbl.entries[12].sz=4;        

    tbl.entries[12].mask[0]=0xff;
    tbl.entries[12].mask[1]=0xff;
    tbl.entries[12].mask[2]=0xff;
    tbl.entries[12].mask[3]=0xff;
    
    tbl.entries[12].flags |= PEND;


    printf("Test 1:\n");
    rslt=parse (buf, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("Test 2:\n");

    rslt=parse (buf+36, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("\n ---- TEST ETHER & IPV4END ----\n");
}

void test_ether_ipv4_udp_only()
{

    uint8_t buf[]= {
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x07, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    0x40,                              /* ipv4 version */
                    0xde,                              /* dscp en */
                    0xde,0xed,                         /* length */
                    0xde,0xed,                         /* id */
                    0xde,0xed,                         /* flags & fragment */
                    0xff,                              /* ttl */
                    0x17,                              /* protocol */
                    0xde,0xed,                         /* cs */
                    0xde,0xed,0xbe,0xef,               /* ipv4 src */
                    0xef,0xbe,0xed,0xde,               /* ipv4 dst */
                    0xbe,0xef,                           /* udp src */
                    0xde,0xad,                           /* udp dst */

                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x07, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    0x40,                              /* ipv4 version */
                    0xde,                              /* dscp en */
                    0xde,0xed,                         /* length */
                    0xde,0xed,                         /* id */
                    0xde,0xed,                         /* flags & fragment */
                    0xff,                              /* ttl */
                    0x06,                              /* protocol */
                    0xde,0xed,                         /* cs */
                    0xde,0xed,0xbe,0xef,               /* ipv4 src */
                    0xef,0xbe,0xed,0xde,               /* ipv4 dst */
                    0xbe,0xef,                           /* udp src */
                    0xde,0xad,                           /* udp dst */

                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x07, /* ether src mac */
                    0x08, 0x00,                        /* ether type */
                    0x04,                              /* ipv4 version */
                    0xff,                              /* IHL */
                    0xde,0xed,                         /* dscp en */
                    0xde,0xed,                         /* length */
                    0xde,0xed,                         /* id */
                    0xde,0xed,                         /* flags & fragment */
                    0xff,                              /* ttl */
                    0x0f,                              /* protocol */
                    0xde,0xed,                         /* cs */
                    0xde,0xed,0xbe,0xef,               /* ipv4 src */
                    0xef,0xbe,0xed,0xde,               /* ipv4 dst */
                    0xbe,0xef,                           /* udp src */
                    0xde,0xad,                           /* udp dst */

                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x09, /* ether src mac */
                    0x86, 0xdd,                        /* ether type */
                    
                    0xde, 0xad, 0xbe, 0xef, 0xf5, 0xf6, /* ether dst mac */
                    0x01, 0x02, 0x3, 0x04, 0x05, 0x11, /* ether src mac */
                    0x08, 0x01,                        /* ether type */
                    
                   };

    struct parse_table tbl;
    uint8_t result[512] = {};
    int rslt=0;

    memset (result, 0, 512);
    printf("\n ---- TEST ETHER & IPV4 UDP----\n");
    tbl.num=15;

    tbl.entries[0].sz=6;

    tbl.entries[0].mask[0]=0xf0;
    tbl.entries[0].mask[1]=0xf0;
    tbl.entries[0].mask[2]=0xf0;
    tbl.entries[0].mask[3]=0xf0;
    tbl.entries[0].mask[4]=0xf0;
    tbl.entries[0].mask[5]=0xf0;
    
    tbl.entries[0].flags &=0;

    tbl.entries[1].sz=6;

    tbl.entries[1].mask[0]=0xff;
    tbl.entries[1].mask[1]=0xff;
    tbl.entries[1].mask[2]=0xff;
    tbl.entries[1].mask[3]=0xff;
    tbl.entries[1].mask[4]=0xff;
    tbl.entries[1].mask[5]=0xff;
    
    tbl.entries[1].flags &=0;

    tbl.entries[2].sz=2;

    tbl.entries[2].mask[0]=0xff;
    tbl.entries[2].mask[1]=0xff;
    
    tbl.entries[2].flags |=PEND;
    tbl.entries[2].flags |=COMPARE;
    tbl.entries[2].flags |=NEXT_PROTO;

    tbl.entries[2].val[0].val=0x0008;
    tbl.entries[2].val[0].tbl_index=3;

    /* Grabs version & IHL */
    tbl.entries[3].sz=1;        

    tbl.entries[3].mask[0]=0x00;
    
    tbl.entries[3].flags &=0;

    /* Grabs dscp & ECN */
    tbl.entries[4].sz=1;        

    tbl.entries[4].mask[0]=0xff;
    
    tbl.entries[4].flags = 0;

    /* length  */
    tbl.entries[5].sz=2;        

    tbl.entries[5].mask[0]=0x0;
    tbl.entries[5].mask[1]=0x0;
    
    tbl.entries[5].flags =0;

    /* id  */
    tbl.entries[6].sz=2;        

    tbl.entries[6].mask[0]=0x0;
    tbl.entries[6].mask[1]=0x0;
    
    tbl.entries[6].flags =0;

    /* flags & fragment  */
    tbl.entries[7].sz=2;        

    tbl.entries[7].mask[0]=0x0;
    tbl.entries[7].mask[1]=0x0;
    
    tbl.entries[7].flags =0;

    /* ttl  */
    tbl.entries[8].sz=1;        

    tbl.entries[8].mask[0]=0xff;
    
    tbl.entries[8].flags =0;

    /* protocol  */
    tbl.entries[9].sz=1;        

    tbl.entries[9].mask[0]=0xff;
    
    tbl.entries[9].flags |= COMPARE;

    tbl.entries[9].val[0].val=0x17;
    tbl.entries[9].val[0].tbl_index=13;
    tbl.entries[9].val[1].val=0x06;
    tbl.entries[9].val[1].tbl_index=13;

    /* cs  */
    tbl.entries[10].sz=2;        

    tbl.entries[10].mask[0]=0x00;
    tbl.entries[10].mask[1]=0x00;
    
    tbl.entries[10].flags &=0;

    /* src ip  */
    tbl.entries[11].sz=4;        

    tbl.entries[11].mask[0]=0xff;
    tbl.entries[11].mask[1]=0xff;
    tbl.entries[11].mask[2]=0xff;
    tbl.entries[11].mask[3]=0xff;
    
    tbl.entries[11].flags &=0;

    /* dst ip  */
    tbl.entries[12].sz=4;        

    tbl.entries[12].mask[0]=0xff;
    tbl.entries[12].mask[1]=0xff;
    tbl.entries[12].mask[2]=0xff;
    tbl.entries[12].mask[3]=0xff;
    
    tbl.entries[12].flags |= PEND ;
    tbl.entries[12].flags |= NEXT_PROTO ;

    /* tcp src port  */
    tbl.entries[13].sz=2;        

    tbl.entries[13].mask[0]=0xff;
    tbl.entries[13].mask[1]=0xff;
    
    tbl.entries[13].flags = 0;

    /* tcp src port  */
    tbl.entries[14].sz=2;        

    tbl.entries[14].mask[0]=0xff;
    tbl.entries[14].mask[1]=0xff;
    
    tbl.entries[14].flags |= PEND;
 


    printf("Test 1:\n");
    rslt=parse (buf, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("Test 2:\n");

    rslt=parse (buf+38, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("Test 3:\n");

    rslt=parse (buf+76, result, &tbl);

    printf("Result %d\n", rslt);

    //dump_buf(result, 64); 

    printf("\n ---- TEST ETHER & IPV4END ----\n");
}


int main (int argc, char *argv[])
{
   unsigned long stsc;
   unsigned long etsc;
   int loop;

   stsc = rdtscl();
   for (loop=0; loop<1; loop ++) 
       test_ether_only();
   etsc = rdtscl();
   //printf("Time in clocks %lu\n", (etsc-stsc));
   stsc = rdtscl();
   for (loop=0; loop<1; loop ++) 
       test_ether_ipv4_only();
   etsc = rdtscl();
   //printf("Time in clocks %lu\n", (etsc-stsc));
   stsc = rdtscl();
   for (loop=0; loop<1; loop ++) 
       test_ether_ipv4_only();
   etsc = rdtscl();
//   printf("Time in clocks %lu\n", (etsc-stsc));
   test_ether_ipv4_udp_only();
}
